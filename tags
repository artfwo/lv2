!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Cumsum	src/utils.rs	/^impl Cumsum for [f64] {$/;"	i
Cumsum	src/utils.rs	/^pub trait Cumsum {$/;"	t
IsVoice	src/voice.rs	/^pub trait IsVoice {$/;"	t
IsVoice for Voice	src/voice.rs	/^impl IsVoice for Voice {$/;"	i
Kaiser	src/utils.rs	/^impl Kaiser for [f64] {$/;"	i
Kaiser	src/utils.rs	/^pub trait Kaiser {$/;"	t
LV2Descriptor	src/lv2.rs	/^pub struct LV2Descriptor {$/;"	s
LV2Feature	src/lv2.rs	/^pub struct LV2Feature {$/;"	s
LV2_Atom	src/lv2.rs	/^pub struct LV2_Atom {$/;"	s
LV2_Atom_Sequence	src/lv2.rs	/^pub struct LV2_Atom_Sequence {$/;"	s
LV2_Atom_Sequence_Body	src/lv2.rs	/^pub struct LV2_Atom_Sequence_Body {$/;"	s
Lv2AtomEvent	src/lv2.rs	/^pub struct Lv2AtomEvent {$/;"	s
Lv2MidiMessageType	src/lv2.rs	/^impl Lv2MidiMessageType {$/;"	i
Lv2MidiMessageType	src/lv2.rs	/^pub enum Lv2MidiMessageType {$/;"	g
Lv2SynthPlugin	src/lv2_plugin.rs	/^impl  Lv2SynthPlugin {$/;"	i
Lv2SynthPlugin	src/lv2_plugin.rs	/^pub struct Lv2SynthPlugin {$/;"	s
Lv2handle	src/lv2.rs	/^pub type Lv2handle = *mut libc::c_void;$/;"	T
Lv2urid	src/lv2.rs	/^pub type Lv2urid = u32;$/;"	T
Lv2uridMap	src/lv2.rs	/^pub struct Lv2uridMap {$/;"	s
Lv2uridMapHandle	src/lv2.rs	/^pub type Lv2uridMapHandle = *mut libc::c_void;$/;"	T
Mult	src/utils.rs	/^impl Mult<[f64]> for [f64]  {$/;"	i
Mult	src/utils.rs	/^impl Mult<f64> for [f64] {$/;"	i
Mult	src/utils.rs	/^pub trait Mult<RHS: ?Sized> {$/;"	t
Mycopy	src/utils.rs	/^impl  Mycopy for [f64] {$/;"	i
Mycopy	src/utils.rs	/^pub trait Mycopy {$/;"	t
N	src/utils.rs	/^    const N: usize = 4*(2700-1)+1; \/\/ Formula: nt*(nppt-1)+1 as usize; nt is even, therefore N must be uneven$/;"	c
OscBasic	src/oscillator.rs	/^impl OscBasic {$/;"	i
OscBasic	src/oscillator.rs	/^pub struct OscBasic {$/;"	s
OscST	src/oscillator.rs	/^impl OscST {$/;"	i
OscST	src/oscillator.rs	/^pub struct OscST {$/;"	s
Oscillator	src/oscillator.rs	/^pub trait Oscillator {$/;"	t
Oscillator for OscBasic	src/oscillator.rs	/^impl Oscillator for OscBasic {$/;"	i
S	src/lib.rs	/^static S: &'static [u8] = b"http:\/\/example.org\/yassy\\0";$/;"	c
Sinc	src/utils.rs	/^impl Sinc for [f64] {$/;"	i
Sinc	src/utils.rs	/^pub trait Sinc {$/;"	t
Synth	src/synth.rs	/^impl  Synth {$/;"	i
Synth	src/synth.rs	/^pub struct Synth {$/;"	s
SynthPlugin	src/plugin.rs	/^impl  SynthPlugin {$/;"	i
SynthPlugin	src/plugin.rs	/^pub struct SynthPlugin {$/;"	s
Synthuris	src/lv2_plugin.rs	/^impl Synthuris {$/;"	i
Synthuris	src/lv2_plugin.rs	/^pub struct Synthuris {$/;"	s
Voice	src/voice.rs	/^pub struct Voice {$/;"	s
activate	src/lib.rs	/^    pub extern fn activate(_instance: lv2::Lv2handle) {}$/;"	f
blit_4T	src/utils.rs	/^pub fn blit_4T() -> Box<[f64]> {$/;"	f
cleanup	src/lib.rs	/^    pub extern fn cleanup(instance: lv2::Lv2handle) {$/;"	f
connect_port	src/lib.rs	/^    pub extern fn connect_port(handle: lv2::Lv2handle, port: u32, data: *mut libc::c_void) {$/;"	f
connect_port	src/lv2_plugin.rs	/^    fn connect_port(&mut self, port: u32, data: *mut libc::c_void) {$/;"	f
connect_port	src/lv2_plugin.rs	/^    fn connect_port(&mut self, u32, *mut libc::c_void);$/;"	f
cumsum	src/utils.rs	/^    fn cumsum(self: &mut Self) {$/;"	f
cumsum	src/utils.rs	/^    fn cumsum(self: &mut Self);$/;"	f
deactivate	src/lib.rs	/^    pub extern fn deactivate(_instance: lv2::Lv2handle) {}$/;"	f
desc	src/lib.rs	/^static mut desc: lv2::LV2Descriptor = lv2::LV2Descriptor {$/;"	c
extension_data	src/lib.rs	/^    pub extern fn extension_data(_uri: *const u8)-> (*const libc::c_void) {$/;"	f
from_int	src/lv2.rs	/^    fn from_int(x: u8) -> Lv2MidiMessageType {$/;"	f
get	src/oscillator.rs	/^    pub fn get(&mut self) -> f64 {$/;"	f
get_amp	src/lv2_plugin.rs	/^    fn get_amp(&mut self) -> f32 {$/;"	f
get_amp	src/lv2_plugin.rs	/^    fn get_amp(&mut self) -> f32;$/;"	f
get_amp	src/oscillator.rs	/^    fn get_amp(&mut self) -> f32 {$/;"	f
get_amp	src/oscillator.rs	/^    fn get_amp(&mut self) -> f32;$/;"	f
get_amp	src/plugin.rs	/^    pub fn get_amp(&mut self) -> f32 {$/;"	f
get_amp	src/synth.rs	/^    pub fn get_amp(&mut self) -> f32 {$/;"	f
get_amp	src/voice.rs	/^    fn get_amp(&mut self) -> f32 {$/;"	f
get_amp	src/voice.rs	/^    fn get_amp(&mut self) -> f32;$/;"	f
initialize	src/voice.rs	/^    fn initialize(&mut self) {$/;"	f
initialize	src/voice.rs	/^    fn initialize(&mut self);$/;"	f
instantiate	src/lib.rs	/^pub extern fn instantiate( _descriptor: *const lv2::LV2Descriptor , fs: f64, bundle_path: *const libc::c_char, hostfeatures: *const (*const lv2::LV2Feature),) -> lv2::Lv2handle {$/;"	f
isLv2SynthPlugin	src/lv2_plugin.rs	/^pub trait isLv2SynthPlugin: {$/;"	t
isLv2SynthPlugin for Lv2SynthPlugin	src/lv2_plugin.rs	/^impl isLv2SynthPlugin for Lv2SynthPlugin {$/;"	i
kaiser	src/utils.rs	/^    fn kaiser(self: &mut Self, alpha: f64) {$/;"	f
kaiser	src/utils.rs	/^    fn kaiser(self: &mut Self, alpha: f64);$/;"	f
kaiser_element	src/utils.rs	/^fn kaiser_element(n: u32, alpha: f64, len: u32) -> f64 {$/;"	f
linspace	src/utils.rs	/^pub fn linspace(slice: &mut [f64], start: f64, stop: f64) -> &mut [f64] {$/;"	f
lv2	src/lib.rs	/^impl lv2::LV2Descriptor {$/;"	i
lv2	src/lib.rs	/^mod lv2;$/;"	m
lv2_atom_pad_size	src/lv2.rs	/^pub fn lv2_atom_pad_size(size: u32) -> (u32) {$/;"	f
lv2_atom_sequence_begin	src/lv2.rs	/^pub fn lv2_atom_sequence_begin(body: *const LV2_Atom_Sequence_Body) ->  (*const Lv2AtomEvent) {$/;"	f
lv2_atom_sequence_is_end	src/lv2.rs	/^pub fn lv2_atom_sequence_is_end(body: *const LV2_Atom_Sequence_Body, size: u32, i: *const Lv2AtomEvent) -> (bool) {$/;"	f
lv2_atom_sequence_next	src/lv2.rs	/^pub fn lv2_atom_sequence_next(i: *const Lv2AtomEvent) -> (*const Lv2AtomEvent)$/;"	f
lv2_descriptor	src/lib.rs	/^pub extern fn lv2_descriptor(index:i32) -> *const lv2::LV2Descriptor {$/;"	f
lv2_midi_is_voice_message	src/lv2.rs	/^pub fn lv2_midi_is_voice_message(msg: *const u8) -> (bool) {$/;"	f
lv2_midi_message_type	src/lv2.rs	/^pub fn lv2_midi_message_type(msg: *const u8) -> (Lv2MidiMessageType) {$/;"	f
lv2_plugin	src/lib.rs	/^mod lv2_plugin;$/;"	m
map_params	src/lv2_plugin.rs	/^    fn map_params(&mut self, port: u32, data: *mut libc::c_void) {$/;"	f
map_params	src/lv2_plugin.rs	/^    fn map_params(&mut self, u32, *mut libc::c_void);$/;"	f
map_params	src/plugin.rs	/^    fn map_params(&mut self, port: u32, data: *mut libc::c_void) {$/;"	f
mapfeatures	src/lv2_plugin.rs	/^    pub fn mapfeatures(&mut self, hostfeatures: *const (*const lv2::LV2Feature)) -> Result<&'static str, &'static str> {$/;"	f
midievent	src/lv2_plugin.rs	/^    fn midievent(&mut self, msg: &u8) ;$/;"	f
midievent	src/lv2_plugin.rs	/^    fn midievent(&mut self, msg: &u8) {$/;"	f
midievent	src/plugin.rs	/^    pub fn midievent(&mut self, msg: &u8) {$/;"	f
mult	src/utils.rs	/^    fn mult(self: &mut Self, c: &f64) {$/;"	f
mult	src/utils.rs	/^    fn mult(self: &mut Self, rhs: &RHS);$/;"	f
mult	src/utils.rs	/^    fn mult(self: &mut Self, rhs: &Self) {$/;"	f
mycopy	src/utils.rs	/^    fn mycopy(self: &mut Self, rhs: &Self) {$/;"	f
mycopy	src/utils.rs	/^    fn mycopy(self: &mut Self, rhs: &Self);$/;"	f
new	src/lv2_plugin.rs	/^    fn new() -> Synthuris {$/;"	f
new	src/lv2_plugin.rs	/^    pub fn new() -> Lv2SynthPlugin {$/;"	f
new	src/oscillator.rs	/^    pub fn new() -> OscBasic {$/;"	f
new	src/plugin.rs	/^    pub fn new() -> SynthPlugin {$/;"	f
new	src/synth.rs	/^    pub fn new() -> Synth {$/;"	f
new	src/voice.rs	/^    fn new() -> Voice {$/;"	f
new	src/voice.rs	/^    fn new() -> Voice;$/;"	f
noteoff	src/synth.rs	/^    pub fn noteoff(&mut self) {$/;"	f
noteon	src/synth.rs	/^    pub fn noteon(&mut self, f0: f32, vel: f32) {$/;"	f
oscillator	src/lib.rs	/^mod oscillator;$/;"	m
param_name	src/synth.rs	/^enum param_name {$/;"	g
plugin	src/lib.rs	/^pub mod plugin;$/;"	m
reset	src/oscillator.rs	/^    pub fn reset(& mut self, fs: f64) {$/;"	f
reset_phase	src/oscillator.rs	/^    fn reset_phase(& mut self) {$/;"	f
reset_phase	src/oscillator.rs	/^    fn reset_phase(&mut self);$/;"	f
run	src/lib.rs	/^    pub extern fn run(instance: lv2::Lv2handle, n_samples: u32) {$/;"	f
set_alpha_i	src/oscillator.rs	/^    pub fn set_alpha_i(&mut self) {$/;"	f
set_f0	src/oscillator.rs	/^    fn set_f0(&mut self, f0: f32) {$/;"	f
set_f0	src/oscillator.rs	/^    fn set_f0(&mut self, f32);$/;"	f
set_f0fn	src/oscillator.rs	/^    pub fn set_f0fn(&mut self, f0: f64) {$/;"	f
set_fs	src/lv2_plugin.rs	/^    fn set_fs(&mut self, f64);$/;"	f
set_fs	src/lv2_plugin.rs	/^    fn set_fs(&mut self, fs: f64) {$/;"	f
set_fs	src/oscillator.rs	/^    fn set_fs(&mut self, f64);$/;"	f
set_fs	src/oscillator.rs	/^    fn set_fs(&mut self, fs: f64) {$/;"	f
set_fs	src/plugin.rs	/^    pub fn set_fs(&mut self, fs: f64) {$/;"	f
set_fs	src/synth.rs	/^    pub fn set_fs(&mut self, fs: f64) {$/;"	f
set_fs	src/voice.rs	/^    fn set_fs(&mut self, f64);$/;"	f
set_fs	src/voice.rs	/^    fn set_fs(&mut self, fs: f64) {$/;"	f
seturis	src/lv2_plugin.rs	/^    pub fn seturis(&mut self) {$/;"	f
sinc	src/utils.rs	/^    fn sinc(self: &mut Self) {$/;"	f
sinc	src/utils.rs	/^    fn sinc(self: &mut Self);$/;"	f
sinc_element	src/utils.rs	/^fn sinc_element(x: &mut f64) -> &mut f64 {$/;"	f
step	src/oscillator.rs	/^    fn step(&mut self){$/;"	f
step_AB	src/oscillator.rs	/^    pub fn step_AB(&mut self){$/;"	f
step_C	src/oscillator.rs	/^    pub fn step_C(&mut self) {$/;"	f
step_D	src/oscillator.rs	/^    pub fn step_D(&mut self) {$/;"	f
synth	src/lib.rs	/^mod synth;$/;"	m
voice	src/lib.rs	/^mod voice;$/;"	m
